3:3 
almost finished the worst code I have ever written in my life for the neural network. It need MASSIVE CLEANING

Go fix te Synapses: Currently OTHER is not pointing to the corret place




3/7:

Success, Everything seems to be working perfectly, There are some minor snags that need to be addressed such as data normalization. When the angle
The Cell is already facing is used as an input then the direction of every cell all lands on a single position due to that
data overpowering the other data in the network. Its good that I caught something like that this early because now I must
think about how I plan to set the inputs of the network up so that they are all in the same range.






#if 0
                         //Creature.cells[1].Force.X += 50*((RANDOM(2) - 1)); // c.Brain.Layers[2].Neurons[0].Value;//
                         //Creature.cells[1].Force.Y += 50*((RANDOM(2) - 1)); //c.Brain.Layers[2].Neurons[0].Value;;//
                         //Creature.cells[2].Brain.Layers[0].Neurons[0].Value = RANDOM(1);// - 40;
#endif
     
	 
	            
#if 0   // For drawing the screen buffer directly to the screen for debugging uses.
       FOR_LOOP(x,WORLD.Size.Width){
                  FOR_LOOP(y,WORLD.Size.Height){
                        if(WORLD.CheckSpace( x, y)!=0) SET_PIXEL(x, y,WORLD.CheckSpace( x, y));
                  }
       } 
#endif






//Organism *Make_Copy(Organism Parent)
//{
//    Organism *temp = new Organism(Parent.Number_of_Cells);
//   *temp = Parent;
//    return temp;
//}
//
void Mutate(Organism &Host, Organism Parent)
{
    
    
    Host.Number_of_Cells = Parent.Number_of_Cells;
    Host.cells.resize(Parent.Number_of_Cells);
    Host.cells = Parent.cells;
    
    
    Host.Velocity.X = 0;
    Host.Velocity.Y = 0;
    Host.Distance_moved = 0;   
    
    
    FOR_LOOP(cellcount, Parent.Number_of_Cells){ // FOR EACH CELL....
        
        Host.cells[cellcount].Offset =  Host.cells[cellcount].Starting;
        Host.cells[cellcount].Velocity.X = 0;
        Host.cells[cellcount].Velocity.Y = 0;
        Host.cells[cellcount].Speed = 0;
        Host.cells[cellcount].Force.X = 0;
        Host.cells[cellcount].Force.Y = 0;
        Host.cells[cellcount].Acceleration.X = 0;   
        Host.cells[cellcount].Angle=0;
        Host.cells[cellcount].Mass = Parent.cells[cellcount].Mass;
        Host.cells[cellcount].Acceleration.Y = 0;   
        Host.cells[cellcount].Parent = &Host;  

        Host.cells[cellcount].Brain.Layers[0] = Parent.cells[cellcount].Brain.Layers[0];
        
        Host.cells[cellcount].Brain.Layers[0].Neurons[0].Value = 0;
        Host.cells[cellcount].Brain.Layers[0].Neurons[1].Value = 0;
        Host.cells[cellcount].Brain.Layers[0].Neurons[2].Value = 0;
        
        Host.cells[cellcount].Brain.Layers[1] = Parent.cells[cellcount].Brain.Layers[1];
        Host.cells[cellcount].Brain.Layers[1].Neurons[0].Value = 0;
        Host.cells[cellcount].Brain.Layers[1].Neurons[1].Value = 0;
        Host.cells[cellcount].Brain.Layers[1].Neurons[2].Value = 0;
        Host.cells[cellcount].Brain.Layers[1].Neurons[3].Value = 0;
        Host.cells[cellcount].Brain.Layers[1].Neurons[4].Value = 0;
        
         FOR_LOOP(HNeuron, Parent.cells[cellcount].Brain.Layers[1].Number_of_Neurons)
         {
         
                 FOR_LOOP(HSynapses, Parent.cells[cellcount].Brain.Layers[0].Number_of_Neurons){
                     Host.cells[cellcount].Brain.Layers[1].Neurons[HNeuron].Synapses[HSynapses].Weight += ((RANDOM(2)-1) / 100);
                 }
         }
         
         Host.cells[cellcount].Brain.Layers[2] = Parent.cells[cellcount].Brain.Layers[2];
         Host.cells[cellcount].Brain.Layers[2].Neurons[0].Value = 0;
         Host.cells[cellcount].Brain.Layers[2].Neurons[1].Value = 0;
         
         FOR_LOOP(ONeuron , Parent.cells[cellcount].Brain.Layers[2].Number_of_Neurons)
         {
                 FOR_LOOP(OSynapses,Parent.cells[cellcount].Brain.Layers[1].Number_of_Neurons){
                      Host.cells[cellcount].Brain.Layers[2].Neurons[ONeuron].Synapses[OSynapses].Weight += ((RANDOM(2)-1)/ 100);
                 }
         }
     }
    
}
//extern Organism *Make_Copy(const Organism Clone);
//extern Organism *Mutate   (Organism Parent);
//extern void Mutate(Organism &Host, Organism Parent);





MOUSE INFORMATION IE: The line on the screen which shows the speed and direction of the mouse
//                       float Length = abs(SCREEN->MOUSE_VELOCITY.x) + abs(SCREEN->MOUSE_VELOCITY.y);
//               
//                       if(Length > 400) Length  = 400;                                              // DRAW MOUSE INFORMATION
//                       LINE2(200,200,SCREEN->MOUSE_ANGLE, Length);
//-------------------------------------------------------------------------------------------------------------
                
 









// Left overs..... Brain.h











/*
class Synapse{
    Neuron *Parent;
    Neuron *Child;
};

struct Neuron{
public:
    double Weight,
           Bias;

    Neuron():Bias(1){}

    vector<Synapse> Connections;
};


class Layer{
public:
    int Number_of_Neurons;
    vector<Neuron> Neurons;
};

class Brain{
public:
    int Number_of_layers;
    vector<Layer> Layers;
};*/


 


//



//  for(int NeuronCount = 0;NeuronCount < hidden; NeuronCount++)
//  {
//          for(int inputcount = 0; inputcount < Layers[0].Number_of_Neurons ; inputcount++)
//          {
//                 Synapse Syn =  Synapse(RANDOM(1), &Layers[1].Neurons[NeuronCount] );
//                  Syn.Other = &Layers[1].Neurons[NeuronCount];
//                 Layers[0].Neurons[inputcount].Synapses.push_back(Syn);
//          }
//  }
//
//
//  for(int NeuronCount = 0;NeuronCount < outputs; NeuronCount++)
//  {
//          for(int inputcount = 0; inputcount < Layers[2].Number_of_Neurons; inputcount++)
//          {
//                 Synapse Syn = Synapse(RANDOM(1), &Layers[2].Neurons[NeuronCount] );
//                 Syn.Other = &Layers[2].Neurons[NeuronCount];
//                 Layers[1].Neurons[inputcount].Synapses.push_back(Syn);
//          }
//  }
//

main.cpp




   // for(int LayerCount = 0;LayerCount < (Number_of_Layers - 1); LayerCount++){
   //     for(int NeuronCount = 0; NeuronCount < Layers[LayerCount].Number_of_Neurons;NeuronCount++ ){
   //          
   //     }
   // }





//???   LAST CELL DOES NOT EFFECT ALL OTHER, THE FIRST PROCESSED EFFECTS ALL AND CREATES A HIERACHY









/*
void main(){
    
    vector<Neuron> Brain ;
    
    Brain.resize(NUBER_OF_NEURONS);

    for(Neuron &n: Brain){
        n.Synapses.resize(NUBER_OF_NEURONS);
        n.Voltage = RANDOM(2) - 1;
       Print(n.Voltage);
    }
    Print(Brain.size());

    for(int count = Brain.size(); count > 0;count--)
    {
        Print(Brain[count - 1].Voltage);
    }

   // Print(Brain.back().Voltage);
    system("PAUSE");
}*/




CELL.CPP








// FORCE.X = FORCE_APPLIED * COS(ANGLE)
// FORCE.Y = FORCE_APPLIED * SIN(ANGLE)
// acceleration = netForce / mass
/// Acceleration = change in Velocity / change in time
/// Velocity = Velocity + Acceleration
// Acceleration = Force / Mass

//=============================================================================================================================================================
//                                                                                                                                                             
//=============================================================================================================================================================


//  Child.Delta_Distance = Child.Distance - Get_Distance(*Child.second, Parent); // Prob does not need to exist but may be useful to calculate yet not store


// (EX:)    tf = 2.47seconds     Acceleration = 46.1(m/s) - 18.5(m/s)  / 2.47(seconds) - 0(seconds) = 11.17(m/s^2)
//           ti = 0                                                                                                                  
//                                                                                                                       
//      Change in Velocity = Final Velocity - Initial Velocity                                                                                                 
//      Change in Time     = Final Time - Initial Time            
//                                                                                                                        
//      Acceleration       = Change in time / Change in Velocity                                                                                               
//                                                                                                                        
//                                                                                                                        
//                                                                                                                        
//       1 Newton = 1kg - (m/s^2)                                                                                                                 
//       <-2N-- + --7N-> = --5N->                                                                                                             
//                                                                                                                        
// (EX:) F            = 10N                                                                                                                       
//       mass         = 2kg                                                                                                                 
//       Acceleration = 10N / 2kg = 5(m/s^2)
//                                                                                                                        
//     Origin == Parent
//     Bob = Child
//     Direction =   Bob - Origin           
//   Current length = disance from Parent to Child.
//    Rest Length = Child.Distance
//    K = .1
//    displacement  Current length - Rest Length                                                                                                                  
//                                                                                                                        
//                                                                                                                        
////   hooks law 
////    -K is constant
// Displacement = Change in shape
////    Force = -K * Displacement







//============ MAKE A SPHERE WITH EVERY EDGE CONNECTED TO EVERY OTHER CELL
//
//FOR_LOOP(cellcount, numcells){                                                // FOR EACH CELL.....
//    int e = 0;
//     for(int edgecount = 0; edgecount  <  numcells;edgecount++ ){                                            // MAKE EDGES CONNECTING THE OTHER CELLS
//         if(edgecount != cellcount){
//                   cells[cellcount].edges.push_back(MakeEdge(&cells[cellcount], cells[edgecount], RANDOM(1)));  
//                   e++;
//     }
// }
//}





    /*  MAKE RANDOM CONNECTIONS
    int e = rand()%(numcells - 1);
FOR_LOOP(cellcount, e){
    FOR_LOOP(edgecount,e){
        cells[cellcount].edges.push_back(MakeEdge(&cells[rand()%numcells], cells[rand()%numcells], RANDOM(1)));
                cells[cellcount].edges.push_back(MakeEdge(&cells[rand()%numcells], cells[rand()%numcells], RANDOM(1)));
                        cells[cellcount].edges.push_back(MakeEdge(&cells[rand()%numcells], cells[rand()%numcells], RANDOM(1)));
    }
}*/




//FOR_LOOP(cellcount, numcells - 1){                                                // FOR EACH CELL.....
//    int a = cellcount,b =0;
//    if(a == 0) b = numcells-1;
//    if(a == numcells-1) b = 0;
//       cells[cellcount].edges.push_back(MakeEdge(&cells[a], cells[b], RANDOM(1)));  
//       cells[cellcount].edges.push_back(MakeEdge(&cells[b], cells[a], RANDOM(1)));  
//}
//







//for(int cellcount = numcells - 1;cellcount > 1;cellcount--){
//      cells[cellcount].edges.push_back(MakeEdge(&cells[cellcount], cells[cellcount-1], RANDOM(1)));  
//
//}
//
 //FOR_LOOP(cellcount, numcells){                                                // FOR EACH CELL.....
 //    int e = 0;
 //     for(int edgecount = 0; edgecount  <  numcells;edgecount++ ){                                            // MAKE EDGES CONNECTING THE OTHER CELLS
 //         if(edgecount != cellcount){
 //                   cells[cellcount].edges.push_back(MakeEdge(&cells[cellcount], cells[edgecount], RANDOM(1)));  
 //                   e++;
 //     }
 // }
 //}


 //

     //   FOR_LOOP(edgecount, numcells){                                            // MAKE EDGES CONNECTING THE OTHER CELLS
          
      //                 cells.back().edges[numcells] = MakeEdge(cells[numcells], cells[edgecount], RANDOM(1));  
   //           }








   
 //
 //for(Neuron &H: Layers[1].Neurons){
 //    for(Neuron &I: Layers[0].Neurons){
 //         Synapse *Syn =  new Synapse(RANDOM(1), I);  
 //        // Syn.Other = &I; // SHOULD NOT NEED THIS AS IT SHOULD BE ASSIGNEDD IN THE ABOVE
 //         Layers[1].Neurons.Synapses.push_back(Syn);
 //    }
 //}
 //
 //  // Layers[1].Neurons[I].Synapses.reserve(Layers[1].Number_of_Neurons);
 //FOR_LOOP(H, Layers[1].Number_of_Neurons){
 //     FOR_LOOP(I , Layers[0].Number_of_Neurons){
 //         Synapse *Syn = new Synapse(RANDOM(1), Layers[0].Neurons[I]);//MakeSynapse(RANDOM(1), &Layers[0].Neurons[I]);  
 //         Layers[1].Neurons[H].Synapses->push_back(*Syn);   // Synapses.push_back(&Syn);
 //     }
 // }
 //
 //
 //FOR_LOOP(O, Layers[2].Number_of_Neurons){
 //     FOR_LOOP(H , Layers[1].Number_of_Neurons){
 //         Synapse *Syn = new Synapse(RANDOM(1), Layers[1].Neurons[H]);//Synapse Syn = MakeSynapse(RANDOM(1),  &Layers[1].Neurons[H]);  
 //         Layers[2].Neurons[O].Synapses->push_back(*Syn);   // Synapses.push_back(&Syn);
 //     }
 // }
 //


//  for(Neuron &O: Layers[2].Neurons){
//       for(Neuron &H: Layers[1].Neurons){
//            Synapse *Syn =  new Synapse(RANDOM(1), H);  
//           // Syn.Other = &H; // SHOULD NOT NEED THIS AS IT SHOULD BE ASSIGNEDD IN THE ABOVE
//            Layers[2].Neurons.Synapses.push_back(&Syn);
//       }
//  }
//
//







//
//
// for(Neuron &H: Layers[1].Neurons){
//     for(Neuron &I: Layers[0].Neurons){
//          H.Synapses.push_back(MakeSynapse(RANDOM(1), &H, &I));   // Synapses.push_back(&Syn);
//     }
// }
//
// int Hcount=0,
//     Ocount=0;
 // for(Neuron &O: Layers[2].Neurons){
 //     Hcount = 0;
 //     for(Neuron &H: Layers[1].Neurons){
 //          O.Synapses.push_back(MakeSynapse(RANDOM(1), &O, &Layers[1].Neurons[Hcount]));   // Synapses.push_back(&Syn);
 //          Hcount++;
 //     }
 //     Ocount++;
 // }
 //

 // FOR_LOOP(Hcount, Layers[1].Number_of_Neurons){
 //     FOR_LOOP(Icount, Layers[0].Number_of_Neurons){
 //          Layers[1].Neurons[Hcount].Synapses.push_back(
 //              MakeSynapse(RANDOM(1), &Layers[1].Neurons[Hcount], &Layers[0].Neurons[Icount]));    
 //     }
 // }
 // 
 // FOR_LOOP(Ocount, Layers[2].Number_of_Neurons){
 //     FOR_LOOP(Hcount, Layers[1].Number_of_Neurons){
 //          Layers[2].Neurons[Ocount].Synapses.push_back(
 //              MakeSynapse(RANDOM(1), &Layers[2].Neurons[Ocount], &Layers[1].Neurons[Hcount]));    
 //     }
 // }
 //




 #if 0
FOR_LOOP(CellCount, Number_of_Cells){
      FOR_LOOP(Hcount, cells[CellCount].Brain.Layers[1].Number_of_Neurons){
       FOR_LOOP(Icount,  cells[CellCount].Brain.Layers[0].Number_of_Neurons){
             cells[CellCount].Brain.Layers[1].Neurons[Hcount].Synapses.push_back(
                MakeSynapse(RANDOM(1), &cells[CellCount].Brain.Layers[1].Neurons[Hcount],
                                       &cells[CellCount].Brain.Layers[0].Neurons[Icount]));    
       }
   }
   
   FOR_LOOP(Ocount, cells[CellCount].Brain.Layers[2].Number_of_Neurons){
       FOR_LOOP(Hcount, cells[CellCount].Brain.Layers[1].Number_of_Neurons){
            cells[CellCount].Brain.Layers[2].Neurons[Ocount].Synapses.push_back(
                MakeSynapse(RANDOM(1), &cells[CellCount].Brain.Layers[2].Neurons[Ocount],
                                       &cells[CellCount].Brain.Layers[1].Neurons[Hcount]));    
       }
   }
}

#endif









/*
 Organism Mutate(Organism *Parent){
     Organism ret = *Parent;
     return ret;
 }*/
/*
  Organism(Organism *parent){

  }*/





  // for(Cell &C : cells){
  //         int  I = 3,//C.Number_of_edges * 2,
  //              H = 5,//rand()%(I * 2),
  //              O = 2;//2;
  //
  //              C.Brain =  Net(I,H,O);
  //
  // }


//Edge MakeEdge(Cell *parent, Cell &other, unsigned char tension){
//    parent->Number_of_edges++;
//
//    Edge ret;
//        ret.RestDistance = Get_Displacement( other.Offset, parent->Offset);
//        ret.second   = &other;
//        ret.Distance =  Get_Distance(*parent, other); 
//        ret.Tension  =  tension;
//        ret.Angle    =  0;
//        ret.Color    =  parent->Color; 
//        ret.Displacement = 0;
//    return ret;
//
//}
////





//_______________________________________________________________
//||  int ID;
//||  Vector2D Offset, Potential, Velocity, Acceleration, Force;
//||  double   Friction;
//||  unsigned char Number_of_edges;
//||  std::vector<Edge> edges;
/*
Cell MakeCell(Organism *parent){
    Cell ret; 
    parent->Number_of_Cells++;

    ret.Offset.X = ret.Potential.X  = RANDOM(300);
    ret.Offset.Y = ret.Potential.Y  = RANDOM(300);

    ret.Velocity  = 0;
    ret.Force     = 0;

    ret.Speed = 0;
    ret.Angle = 0.0;//RANDOM(0);
    ret.Friction  = RANDOM(1);

    ret.Color = RGB(RANDOM(255),
                    RANDOM(255),
                    RANDOM(255));

    if (ret.Color <= RGB(55,55,55))ret.Color = RGB(255,255,255);
    ret.Mass = 10;
    ret.Parent = parent;
    return ret;
}
*/














//  
//
// Number_of_Cells = 0; // Parent.Number_of_Cells;
//
//  Position  = Parent.Position; 
//  Potential = Parent.Potential; 
//  Velocity  =  Parent.Velocity; 
//  Starting  =  Parent.Starting;
//  Position.X += rand()%SCREENWIDTH;
//  Position.Y += rand()%SCREENHEIGHT;
//
//   //   Speed = *&Parent.Speed;
//     // Angle = *&Parent.Angle;
//
//  Distance_moved = 0;
//
////  cells = new Cell[Number_of_Cells]; //Parent.cells;
//
//  FOR_LOOP(C, Number_of_Cells){
//      Cell temp = Parent.cells[C];
//      cells.push_back(temp); // = *Parent.cells[C];
//  }
//
//  FOR_LOOP(cellcount, Number_of_Cells){
//        int e = 0;
//         FOR_LOOP(edgecount, rand()%Number_of_Cells){  // MAKE EDGES CONNECTING THE OTHER CELLS
//            if(edgecount != cellcount){
//                 int cnum  = rand()%Number_of_Cells;
//                 int cnum2 = rand()%Number_of_Cells;
//
//                     cells[cnum ].edges.push_back(MakeEdge(&cells[cnum ], cells[cnum2], RANDOM(1)));  
//                     cells[cnum2].edges.push_back(MakeEdge(&cells[cnum2], cells[cnum ], RANDOM(1)));  
//                   
//                     e++;
//            }
//      }
//
//   }
// 
//        for(Cell &C : cells){
//          int  I = 3,//C.Number_of_edges * 2,
//               H = 5,//rand()%(I * 2),
//               O = 2;//2;
//               C.Brain =  Net(I,H,O);
//  }
//        if(Number_of_Cells == 0) Number_of_Cells = 1;
//OR_LOOP(CellCount, Number_of_Cells){
//  FOR_LOOP(Hcount, cells[CellCount].Brain.Layers[1].Number_of_Neurons){
//      FOR_LOOP(Icount,  cells[CellCount].Brain.Layers[0].Number_of_Neurons){
//            cells[CellCount].Brain.Layers[1].Neurons[Hcount].Synapses.push_back(
//               MakeSynapse(RANDOM(1), &cells[CellCount].Brain.Layers[1].Neurons[Hcount],
//                                      &cells[CellCount].Brain.Layers[0].Neurons[Icount]));    
//      }
//  }
//  
//  FOR_LOOP(Ocount, cells[CellCount].Brain.Layers[2].Number_of_Neurons){
//      FOR_LOOP(Hcount, cells[CellCount].Brain.Layers[1].Number_of_Neurons){
//           cells[CellCount].Brain.Layers[2].Neurons[Ocount].Synapses.push_back(
//               MakeSynapse(RANDOM(1), &cells[CellCount].Brain.Layers[2].Neurons[Ocount],
//                                      &cells[CellCount].Brain.Layers[1].Neurons[Hcount]));    
//      }
//  }
//
//
//
//FOR_LOOP(CellCount, Number_of_Cells){
//   FOR_LOOP(Hcount, cells[CellCount].Brain.Layers[1].Number_of_Neurons){
//       FOR_LOOP(Icount,  cells[CellCount].Brain.Layers[0].Number_of_Neurons){
//             cells[CellCount].Brain.Layers[1].Neurons[Hcount].Synapses.push_back(
//                MakeSynapse(RANDOM(1), &cells[CellCount].Brain.Layers[1].Neurons[Hcount],
//                                       &cells[CellCount].Brain.Layers[0].Neurons[Icount]));    
//       }
//   }
//   
//   FOR_LOOP(Ocount, cells[CellCount].Brain.Layers[2].Number_of_Neurons){
//       FOR_LOOP(Hcount, cells[CellCount].Brain.Layers[1].Number_of_Neurons){
//            cells[CellCount].Brain.Layers[2].Neurons[Ocount].Synapses.push_back(
//                MakeSynapse(RANDOM(1), &cells[CellCount].Brain.Layers[2].Neurons[Ocount],
//                                       &cells[CellCount].Brain.Layers[1].Neurons[Hcount]));    
//       }
//   }
//}
//









#if 0
Organism::Organism(Organism const &Parent){
    *this = *&Parent; 
   Position.X = Potential.X =  -100;//rand()%SCREENWIDTH / 2;// / 2;  
    Position.Y = Potential.Y =  -100; //rand()%SCREENHEIGHT / 2;// / 2;
    Velocity.X = Velocity.Y = 0;
    Number_of_Cells=0;
    int numcells = Parent.Number_of_Cells;
    Starting.X = Position.X;
    Starting.Y = Position.Y;
    Distance_moved = 0.0;

    FOR_LOOP(count, numcells){
        Cell *temp = new Cell(this);
        cells.push_back(*temp);
    }


    float     X =  0,
              Y =  0, 
          angle =  0,
           dist =  25,
          Theta =  360 / Number_of_Cells;

    for(Cell &c : cells){
       angle+=Theta;
        X+= dist * cos(RADIANS(angle));
        Y+= dist * sin(RADIANS(angle));
        c.Offset.X = X; // rand()%(int)dist;//
        c.Offset.Y = Y; // rand()%(int)dist;//
    }

   FOR_LOOP(cellcount, numcells){   // FOR EACH CELL.....
       int e = 0;
       FOR_LOOP(edgecount, rand()%numcells){  // MAKE EDGES CONNECTING THE OTHER CELLS
             if(edgecount != cellcount){
                  int cnum  = rand()%numcells;
                  int cnum2 = rand()%numcells;
                  Cell *other1( &cells[cnum ]);
                  Cell *other2( &cells[cnum2]); 
                   //   cells[cnum ].edges.push_back(MakeEdge(other1, *other2, RANDOM(1)));  
                    //  cells[cnum2].edges.push_back(MakeEdge(other2, *other1, RANDOM(1)));  
                    
                      e++;
             }
       }
   }


   for(Cell &C : cells){
           int  I = 3,//C.Number_of_edges * 2,
                H = 5,//rand()%(I * 2),
                O = 2;//2;
                Net *temp = new  Net(I,H,O); 
                C.Brain = *temp; // new Net(I,H,O);

   }
}

#endif


#if 0
Cell::Cell(const Cell &other){
      Cell ret; 
   //other.Parent->Number_of_Cells++;

   Offset.X = Potential.X  = RANDOM(300);
   Offset.Y = Potential.Y  = RANDOM(300);

   Velocity  = 0;
   Force     = 0;

   Speed = 0;
   Angle = RANDOM(0);
   Friction  = RANDOM(1);

   Color = RGB(RANDOM(255),
                   RANDOM(255),
                   RANDOM(255));

   if (Color <= RGB(55,55,55))Color = RGB(255,255,255);
   Mass = 10;
   Parent = other.Parent;
}

#endif




   int numcells =  Parent.Number_of_Cells;

    Organism *ret = new Organism(numcells);
    
    
    ret->Number_of_Cells =(0);
    ret->Distance_moved =(0.0);

    ret->Position.X = ret->Potential.X =  (rand()%SCREENWIDTH  / 2) + 100; // Parent.Position.X; //  
    ret->Position.Y = ret->Potential.Y = (rand()%SCREENHEIGHT / 2) + 100 ; //  Parent.Position.Y; //
    ret->Velocity.X = ret->Velocity.Y = 0;

    ret->Starting.X = ret->Position.X;
    ret->Starting.Y = ret->Position.Y;



    FOR_LOOP(Cellcount, Parent.Number_of_Cells){
        Cell *temp = new Cell(ret);
        temp->Color = Parent.cells[Cellcount].Color;
        temp->Offset.X = Parent.cells[Cellcount].Offset.X + (RANDOM(1) - .5);
        temp->Offset.Y = Parent.cells[Cellcount].Offset.Y + (RANDOM(1) - .5);
        ret->cells[Cellcount] = *temp;
    }

   FOR_LOOP(cellcount, Parent.Number_of_Cells){ // FOR EACH CELL....
      FOR_LOOP(edgecount, Parent.cells.size()){  // MAKE EDGES CONNECTING THE OTHER CELLS
             if(edgecount != cellcount){
                  int cnum  = Parent.cells[cellcount].edges[edgecount].Parent_ID;//rand()%numcells;
                  int cnum2 = Parent.cells[cellcount].edges[edgecount].Child_ID;//rand()%numcells;

                      ret->cells[cnum ].edges.push_back(Edge(&ret->cells[cnum ], ret->cells[cnum2], RANDOM(1)));  
                      ret->cells[cnum2].edges.push_back(Edge(&ret->cells[cnum2], ret->cells[cnum ], RANDOM(1)));  
             }
       }
   }
      
   for(Cell &C : ret->cells){
      int  I = 3, 
           H = 5, 
           O = 2; 
           Net *temp = new  Net(I,H,O); 
           C.Brain   = *temp; 
   }


    FOR_LOOP(cellcount, Parent.Number_of_Cells){ // FOR EACH CELL....
        ret->cells[cellcount].Brain.Layers[0] = Parent.cells[cellcount].Brain.Layers[0];
    }

    FOR_LOOP(cellcount, Parent.Number_of_Cells){ // FOR EACH CELL....
        ret->cells[cellcount].Brain.Layers[1] = Parent.cells[cellcount].Brain.Layers[1];
        FOR_LOOP(Hcount, ret->cells[cellcount].Brain.Layers[1].Number_of_Neurons){ // FOR EACH CELL....
            FOR_LOOP(SynCount, ret->cells[cellcount].Brain.Layers[0].Number_of_Neurons){
                ret->cells[cellcount].Brain.Layers[1].Neurons[Hcount].Synapses[SynCount].Weight = Parent.cells[cellcount].Brain.Layers[1].Neurons[Hcount].Synapses[SynCount].Weight;
            }
        }
    }

    FOR_LOOP(cellcount, Parent.Number_of_Cells){ // FOR EACH CELL....
        ret->cells[cellcount].Brain.Layers[2] = Parent.cells[cellcount].Brain.Layers[2];
        FOR_LOOP(Ocount, ret->cells[cellcount].Brain.Layers[2].Number_of_Neurons){ // FOR EACH CELL....
            FOR_LOOP(SynCount, ret->cells[cellcount].Brain.Layers[1].Number_of_Neurons){
                ret->cells[cellcount].Brain.Layers[2].Neurons[Ocount].Synapses[SynCount].Weight = Parent.cells[cellcount].Brain.Layers[2].Neurons[Ocount].Synapses[SynCount].Weight;
            }
        }
    }

    //RANDOM(1) - .5;


   // FOR_LOOP(Ocount, Parent.Number_of_Cells){ // FOR EACH CELL....
  //      ret->cells[cellcount].Brain.Layers[2] = Parent.cells[cellcount].Brain.Layers[2];
  //  }
//

    return ret;


























	/*

Organism::Organism(Organism const &Parent , float Mutation_rate){
    
this->Number_of_Cells = Parent.Number_of_Cells;
this->cells.resize(Parent.Number_of_Cells);
this->cells = Parent.cells;
this->Position = this->Position;

this->Velocity.X = 0;
this->Velocity.Y = 0;
this->Distance_moved = 0;   


 FOR_LOOP(cellcount, Parent.Number_of_Cells){ // FOR EACH CELL....

     this->cells[cellcount].Offset =  this->cells[cellcount].Starting;
this->cells[cellcount].Velocity.X = 0;
this->cells[cellcount].Velocity.Y = 0;
this->cells[cellcount].Speed = 0;
this->cells[cellcount].Force.X = 0;
this->cells[cellcount].Force.Y = 0;
this->cells[cellcount].Acceleration.X = 0;   
this->cells[cellcount].Angle=0;
this->cells[cellcount].Mass = Parent.cells[cellcount].Mass;
this->cells[cellcount].Acceleration.Y = 0;   
 this->cells[cellcount].Parent = this;  
              //  Parent.Offset   += Parent.Velocity;     // Change in Position over time equals Velocity   
                
              //  Parent.Force.X = 0; Parent.Force.Y = 0;




this->cells[cellcount].Brain.Layers[0] = Parent.cells[cellcount].Brain.Layers[0];

     this->cells[cellcount].Brain.Layers[0].Neurons[0].Value = 0;
     this->cells[cellcount].Brain.Layers[0].Neurons[1].Value = 0;
     this->cells[cellcount].Brain.Layers[0].Neurons[2].Value = 0;

this->cells[cellcount].Brain.Layers[1] = Parent.cells[cellcount].Brain.Layers[1];
     this->cells[cellcount].Brain.Layers[1].Neurons[0].Value = 0;
     this->cells[cellcount].Brain.Layers[1].Neurons[1].Value = 0;
     this->cells[cellcount].Brain.Layers[1].Neurons[2].Value = 0;
     this->cells[cellcount].Brain.Layers[1].Neurons[3].Value = 0;
     this->cells[cellcount].Brain.Layers[1].Neurons[4].Value = 0;

         FOR_LOOP(HNeuron, Parent.cells[cellcount].Brain.Layers[1].Number_of_Neurons)
         {

                 FOR_LOOP(HSynapses, Parent.cells[cellcount].Brain.Layers[0].Number_of_Neurons){
                     this->cells[cellcount].Brain.Layers[1].Neurons[HNeuron].Synapses[HSynapses].Weight += ((RANDOM(2)-1) / 10);
                 }
         }

this->cells[cellcount].Brain.Layers[2] = Parent.cells[cellcount].Brain.Layers[2];
         this->cells[cellcount].Brain.Layers[2].Neurons[0].Value = 0;
         this->cells[cellcount].Brain.Layers[2].Neurons[1].Value = 0;

         FOR_LOOP(ONeuron , Parent.cells[cellcount].Brain.Layers[2].Number_of_Neurons)
         {
                 FOR_LOOP(OSynapses,Parent.cells[cellcount].Brain.Layers[1].Number_of_Neurons){
                      this->cells[cellcount].Brain.Layers[2].Neurons[ONeuron].Synapses[OSynapses].Weight += ((RANDOM(2)-1)/ 10);
                 }
         }
 }
}



/*
Organism::Organism(Organism const &Parent)
{
    float POSX=  this->Position.X ,
          POSY=  this->Position.Y;
 // Organism *temp = new Organism(Parent.Number_of_Cells);
  *this = Parent;

   this->Position.X = POSX ;
   this->Position.X = POSY;
 // temp->Number_of_Cells = Parent.Number_of_Cells;
 

}






// CHANGE THIS FUNCTION IN THE FUTURE SO THAT PARENT->NUMBEROFCELLS Is Accessed once and applied to a Variable
//
//  int numcells =  Parent.Number_of_Cells;
//
///  Organism *ret = new Organism(numcells);
//
//
//Host.Number_of_Cells =(0);
//Host.Distance_moved =(0.0);
//
//Host.Position.X = Host.Potential.X =  Parent.Position.X; //  (rand()%SCREENWIDTH  / 2) + 100; // 
//Host.Position.Y = Host.Potential.Y =   Parent.Position.Y; //(rand()%SCREENHEIGHT / 2) + 100 ; //
//Host.Velocity.X = Host.Velocity.Y = 0;
//
//Host.Starting.X = Host.Position.X;
//Host.Starting.Y = Host.Position.Y;
///
///FOR_LOOP(Cellcount, Parent.Number_of_Cells){
///
//Cell *temp = new Cell(ret);
//temp->Color = Parent.cells[Cellcount].Color;
//temp->Offset = Parent.cells[Cellcount].Starting;
//temp->Number_of_edges = 0;
//Host.cells[Cellcount] = *temp;
//delete(temp);
//}














//FOR_LOOP(cellcount, Parent.Number_of_Cells){ // FOR EACH CELL....
//    Host.cells[cellcount].Brain.Layers[0] = Parent.cells[cellcount].Brain.Layers[0];
//}
//FOR_LOOP(cellcount, Parent.Number_of_Cells){ // FOR EACH CELL....
//    Host.cells[cellcount].Brain.Layers[1] = Parent.cells[cellcount].Brain.Layers[1];
//}
//FOR_LOOP(cellcount, Parent.Number_of_Cells){ // FOR EACH CELL....
//    Host.cells[cellcount].Brain.Layers[2] = Parent.cells[cellcount].Brain.Layers[2];
//}
//


  // 
  // FOR_LOOP(cellcount, Parent.Number_of_Cells){ // FOR EACH CELL....
  //     ret->cells[cellcount].Brain.Layers[0] = Parent.cells[cellcount].Brain.Layers[0];
  // }
  //
  //
  // FOR_LOOP(cellcount, Parent.Number_of_Cells){ // FOR EACH CELL....
  //     ret->cells[cellcount].Brain.Layers[1] = Parent.cells[cellcount].Brain.Layers[1];
  //         FOR_LOOP(HNeuron ,ret->cells[cellcount].Brain.Layers[1].Number_of_Neurons)
  //         {
  //                 FOR_LOOP(HSynapses, ret->cells[cellcount].Brain.Layers[0].Number_of_Neurons){
  //                    ret->cells[cellcount].Brain.Layers[1].Neurons[HNeuron].Synapses[HSynapses].Weight += (RANDOM(2)-1) / 10;
  //                 }
  //         }
  // }
  //
  //
  // FOR_LOOP(cellcount, Parent.Number_of_Cells){ // FOR EACH CELL....
  //     ret->cells[cellcount].Brain.Layers[2] = Parent.cells[cellcount].Brain.Layers[2];
  //         FOR_LOOP(ONeuron ,ret->cells[cellcount].Brain.Layers[2].Number_of_Neurons)
  //         {
  //                 FOR_LOOP(OSynapses, ret->cells[cellcount].Brain.Layers[1].Number_of_Neurons){
  //                     ret->cells[cellcount].Brain.Layers[2].Neurons[ONeuron].Synapses[OSynapses].Weight += (RANDOM(2)-1)/ 10;
  //                 }
  //         }
  // }
  //
  //
  //

//    return ret;

       // temp->cells[cellcount].Brain.Layers[0] = Parent.cells[cellcount].Brain.Layers[0];
       // temp->cells[cellcount].Brain.Layers[1] = Parent.cells[cellcount].Brain.Layers[1];
       // temp->cells[cellcount].Brain.Layers[2] = Parent.cells[cellcount].Brain.Layers[2];


 //for(Cell &C : Host.cells){
 //        Net *temp = new  Net(3,5,2); 
 //        C.Brain   = *temp; 
 //        delete (temp);
 //}
 //


#if 0
    int numcells =  Parent.Number_of_Cells;

    Organism *ret = new Organism(numcells);
    
    
    ret->Number_of_Cells =(0);
    ret->Distance_moved =(0.0);

    ret->Position.X = ret->Potential.X =  Parent.Position.X; //  (rand()%SCREENWIDTH  / 2) + 100; // 
    ret->Position.Y = ret->Potential.Y =   Parent.Position.Y; //(rand()%SCREENHEIGHT / 2) + 100 ; //
    ret->Velocity.X = ret->Velocity.Y = 0;

    ret->Starting.X = ret->Position.X;
    ret->Starting.Y = ret->Position.Y;



    FOR_LOOP(Cellcount, Parent.Number_of_Cells){
             Cell *temp = new Cell(ret);

             temp->Color = Parent.cells[Cellcount].Color;
             temp->Offset = Parent.cells[Cellcount].Starting;
             temp->Number_of_edges = 0;

             ret->cells[Cellcount] = *temp;
    }

   FOR_LOOP(cellcount, Parent.Number_of_Cells){ // FOR EACH CELL....
      FOR_LOOP(edgecount, Parent.cells[cellcount].Number_of_edges){  // MAKE EDGES CONNECTING THE OTHER CELLS
             if(edgecount != cellcount){
                  int cnum  = Parent.cells[cellcount].edges[edgecount].Parent_ID;//rand()%numcells;
                  int cnum2 = Parent.cells[cellcount].edges[edgecount].Child_ID;//rand()%numcells;

                      ret->cells[cnum ].edges.push_back(Edge(&ret->cells[cnum ], &ret->cells[cnum2], RANDOM(1)));  
                      ret->cells[cnum2].edges.push_back(Edge(&ret->cells[cnum2], &ret->cells[cnum ], RANDOM(1)));  

                      ret->cells[cnum ].Number_of_edges++;
                      ret->cells[cnum2].Number_of_edges++;
             }
       }
   }
      
   for(Cell &C : ret->cells){
      int  I = 3, 
           H = 5, 
           O = 2; 
           Net *temp = new  Net(I,H,O); 
           C.Brain   = *temp; 
   }


    FOR_LOOP(cellcount, Parent.Number_of_Cells){ // FOR EACH CELL....
        ret->cells[cellcount].Brain.Layers[0] = Parent.cells[cellcount].Brain.Layers[0];
    }
    FOR_LOOP(cellcount, Parent.Number_of_Cells){ // FOR EACH CELL....
        ret->cells[cellcount].Brain.Layers[1] = Parent.cells[cellcount].Brain.Layers[1];
    }
    FOR_LOOP(cellcount, Parent.Number_of_Cells){ // FOR EACH CELL....
        ret->cells[cellcount].Brain.Layers[2] = Parent.cells[cellcount].Brain.Layers[2];
    }
#endif